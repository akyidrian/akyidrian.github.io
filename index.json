[{"content":"Since earning my EEE degree in 2013, I\u0026rsquo;ve been amazed by the revolution in hardware prototyping driven by Arduino and Raspberry Pi. These platforms have democratised electronics, making them accessible to beginners. Equally fascinating is the evolution of JavaScript, which has grown from merely allowing the creation of dynamic web pages to enabling direct hardware control. Many of these now-commonplace tools were unavailable during my studies, making me envious of today\u0026rsquo;s newcomers, yet excited for the rapid technological advancements to come.\nDuring the NodeBots Workshop at Conf \u0026amp; Coffee 2018, I had the opportunity to revisit the basics and experiment with the open-source Johnny-Five platform using an Arduino Uno. Johnny-Five, a Node.js library, facilitates JS programming for a wide range of development boards, with a focus on robotics and IoT applications. It relies on the Firmata protocol to communicate with microcontrollers, and offers compatibility with custom boards too.\nGetting Started Let\u0026rsquo;s explore some of Johnny-Five\u0026rsquo;s capabilities by first creating a simple LED blinking program:\nvar five = require(\u0026#39;johnny-five\u0026#39;); var board = new five.Board(); board.on(\u0026#39;ready\u0026#39;, function () { var led = new five.Led(13); led.blink(1000); // in ms }); As you can see, minimal code is required!\nIn addition to basic output control, Johnny-Five makes it easy to handle asynchronous events from various inputs. For example, here\u0026rsquo;s how you can toggle an LED using a button press:\nvar five = require(\u0026#39;johnny-five\u0026#39;); var board = new five.Board(); board.on(\u0026#39;ready\u0026#39;, function () { var led = new five.Led(13); var button = new five.Button(5); button.on(\u0026#34;press\u0026#34;, function() { led.toggle(); }); }); You can also utilise Johnny-Five for sensor inputs, such as a photoresistor:\nvar five = require(\u0026#39;johnny-five\u0026#39;); var board = new five.Board(); board.on(\u0026#39;ready\u0026#39;, function () { var led = new five.Led(13); var sensor = new five.Sensor(\u0026#34;A0\u0026#34;); sensor.on(\u0026#34;change\u0026#34;, function() { if(this.value \u0026gt; 600) { led.on(); } else { led.off(); } }); }); These simple examples demonstrate the ease of integrating hardware input-output with Johnny-Five. At no point did we need to write code for the round-robin loop, tune the loop frequency, configure data direction registers or mask the right pins with bit manipulation.\nClient-Server Interaction One surprising feature of Johnny-Five for me was its ability to create client-server scenarios effortlessly. For instance, you can set up a UDP client using Node.js on your developer machine to communicate with an Arduino server via USB:\nvar dgram = require(\u0026#39;dgram\u0026#39;); var client = dgram.createSocket(\u0026#39;udp4\u0026#39;); // Send empty datagrams over port 1337 client.send(\u0026#34;\u0026#34;, 1337, \u0026#39;localhost\u0026#39;, function(err) { console.error(\u0026#34;Failed to send. Is your Arduino running \u0026#39;server.js\u0026#39;?\\n\u0026#34;); client.close(); }); On the Arduino side, you can create a server to respond to incoming datagrams or trigger actions, such as playing a tune over a connected piezo speaker:\nvar dgram = require(\u0026#39;dgram\u0026#39;); var five = require(\u0026#39;johnny-five\u0026#39;); var board = new five.Board(); board.on(\u0026#39;ready\u0026#39;, function () { var piezo = new five.Piezo(8); var server = dgram.createSocket(\u0026#39;udp4\u0026#39;); server.on(\u0026#39;message\u0026#39;, function() { piezo.play({ song: [ [\u0026#34;C4\u0026#34;, 1 / 4], [\u0026#34;D4\u0026#34;, 1 / 4], [\u0026#34;F4\u0026#34;, 1 / 4], [\u0026#34;D4\u0026#34;, 1 / 4], [\u0026#34;A4\u0026#34;, 1 / 4], [null, 1 / 4], [\u0026#34;A4\u0026#34;, 1], [\u0026#34;G4\u0026#34;, 1], [null, 1 / 2], [\u0026#34;C4\u0026#34;, 1 / 4], [\u0026#34;D4\u0026#34;, 1 / 4], [\u0026#34;F4\u0026#34;, 1 / 4], [\u0026#34;D4\u0026#34;, 1 / 4], [\u0026#34;G4\u0026#34;, 1 / 4], [null, 1 / 4], [\u0026#34;G4\u0026#34;, 1], [\u0026#34;F4\u0026#34;, 1], [null, 1 / 2] ], tempo: 100 }); }); server.bind(1337); }); On a similar note, I experimented with dnode, an asynchronous RPC system for Node.js that facilitates remote function calls. A client, running on a developer\u0026rsquo;s machine, connects to a server and calls a remote getTemperature function:\nvar dnode = require(\u0026#39;dnode\u0026#39;); var d = dnode.connect(1337); d.on(\u0026#39;remote\u0026#39;, function(remote) { remote.getTemperature(function(t) { console.log(\u0026#34;Temperature is: \u0026#34; + t + \u0026#34;\\n\u0026#34;); d.end(); }); }); On the Arduino server, a temp variable is continuously updated with the latest temperature from a connected sensor. The server also handles remote calls to its getTemperature function, executing the console.log callback provided by the client. Here\u0026rsquo;s the server code:\nvar dnode = require(\u0026#39;dnode\u0026#39;); var five = require(\u0026#39;johnny-five\u0026#39;); var board = new five.Board(); board.on(\u0026#39;ready\u0026#39;, function () { var therm = new five.Thermometer({ controller: \u0026#34;TMP36\u0026#34;, pin: \u0026#34;A0\u0026#34;, }); var temp = null; therm.on(\u0026#34;change\u0026#34;, function() { temp = this.C; }); var server = dnode({ getTemperature: function(cb) { cb(temp); } }); server.listen(1337); }); These two examples, one with UDP sockets and the other with RPC, showcases the versatility of Johnny-Five in facilitating client-server communication for interactive hardware applications.\nDebugging with Console When debugging Arduino projects, the REPL (Read-Eval-Print Loop) proves to be a valuable tool. It facilitates seamless communication between your Arduino device and the Node.js terminal on your computer, enabling you to send and receive debug commands and messages. Let\u0026rsquo;s dive into an example of using the REPL to control an LED and log the result:\nvar five = require(\u0026#34;johnny-five\u0026#34;); var board = new five.Board(); board.on(\u0026#34;ready\u0026#34;, function() { var led = new five.Led(13); this.repl.inject({ // Allow limited on/off control access to the LED instance from the REPL. on: function() { led.on(); console.log(\u0026#34;LED is on\u0026#34;); }, off: function() { led.off(); console.log(\u0026#34;LED is off\u0026#34;); } }); }); Executing the following commands in your Node.js terminal will turn the LED on and then off:\n\u0026gt; on() LED is on \u0026gt; off() LED is off While this example may seem trivial, it effectively showcases the power of real-time logging and interactive code execution of your Arduino from your terminal, and the ease in setting it all up.\nClosing I hope this summary provides a glimpse into the capabilities of Johnny-Five. With its user-friendly interface, it serves as an ideal platform for swiftly prototyping and implementing projects. If you\u0026rsquo;re feeling inspired, feel free to explore my workshop code.\n","permalink":"https://akyidrian.github.io/posts/2018-04-22-electronics-and-javascript-actually-do-mix/","summary":"My First Impressions of the Johnny-Five Platform","title":"Electronics and JavaScript Actually Do Mix"},{"content":"Since its humble beginnings at NetScape in 1995, JavaScript\u0026rsquo;s popularity has grown significantly beyond its initial goal of making web pages more dynamic. ECMAScript (ES), the standard for JavaScript (JS), has also undergone several evolutions too. Despite these developments however many of the oddities from the early version of JS have lingered and become characteristic of the language.\nRecently, I\u0026rsquo;ve delved back into JS and during the \u0026ldquo;JavaScript - The not so weird (anymore) parts\u0026rdquo; talk at Conf \u0026amp; Coffee 2018 I was reminded of some of the odd aspects of JS that I\u0026rsquo;ve fallen prey to. For new players, this can be frustrating, especially when the language itself is tripping you up rather than the problem you\u0026rsquo;re trying to solve. For me, coming from a C/C++ background, truthy/falsy values, logical operators, scope and objects particularly had me confused.\nTruthy and Falsy Values A truthy value is any value which is considered to be true inside a Boolean context (in an if statement, for example). The opposite to truthy is falsy, which is any value that is false inside a Boolean context. The tricky part of truthy and falsy values in JS is often trying to understand and remember the implicit type conversion (known as type coercion) performed on non-Boolean values in a Boolean context. A useful way to to avoid confusing yourself is to remember that the following are all the falsy values in JS:\nfalse 0 null undefined \u0026#39;\u0026#39; \u0026#34;\u0026#34; NaN Therefore, anything else must be truthy. Some examples of truthy values include:\ntrue \u0026#34;true\u0026#34; \u0026#34;false\u0026#34; \u0026#34;1\u0026#34; \u0026#34;0\u0026#34; \u0026#34;-1\u0026#34; 1 -1 1.62 -1.62 Infinity -Infinity {} [] function(){} new Date() Logical Operators With logical operators, we\u0026rsquo;re faced with an additional level of logical complexity around datatypes which isn\u0026rsquo;t necessarily consistent with what we expect. This is regardless of the truthy/falsy nature of values just discussed. For instance,\n// These seem consistent... false == 0 // true false == \u0026#34;\u0026#34; // true 0 == \u0026#34;\u0026#34; // true // These are not so consistent... false == null // false false == undefined // false null == undefined // true // This is common in other languages too, but easily be confused... false == NaN // false NaN == NaN // false // Interesting behaviour around [], {} and strings... false == [] // true false == [0] // true false == [[]] // true false == {} // false [] == {} // false false == \u0026#34;0\u0026#34; // true false == \u0026#34;false\u0026#34; // false For a more comprehensive table of equality, go here.\nAs a solution to help avoid the confusing variability shown, you could use the !! unary operator to force a value to become true or false. !! essential would allow the Boolean expressions as a whole to become more consistent with the truthy/falsy behaviour discussed before:\nfalse == !!null // true false == !!undefined // true false == !!NaN // true false == !![] // false false == !!\u0026#34;0\u0026#34; // false However, an even better solution is to check equality in type too. Thus, I recommend you always use strict equality operators (=== or !==) in comparing values. Doing so will help defend against the errors that can result due to the dynamic typing nature of JS; accidental reassignment of a variable from one type to another, for instance. Being verbose with the triple operators will also help you ensure you understand what you are writing, and make the lives of those who have to manage your code a little more straight forward.\nAs a final side note, there are seven datatypes in JS. Six of which are primitives:\nBoolean Null Undefined Number String Symbol (introduced in ECMAScript 6) with the seventh data type being Object. If you\u0026rsquo;re wondering what is the difference between Null and Undefined, I suggest you visit StackOverflow to find out.\nScope When coming from languages like C, we are used to variables declared inside a set of curly brackets to only exist within the curly brackets. In other words, variables are bound to a scope. In JS, this can become blurry when you use var keyword:\nfor(var i = 0; i \u0026lt; 10; i++) {} console.log(i); // 10 if(true) { var i = 20; var i = 30; } console.log(i); // 30 Likewise, and somewhat insidiously, without any keyword in the declaration, a variable becomes global:\nfunction globalisation() { var local = 3.14; global = \u0026#39;global\u0026#39;; } Although, this is assuming strict mode isn\u0026rsquo;t enabled, which can save you from a lot of pain as a beginner to JS.\nAs a result, generally it\u0026rsquo;s best to get into the habit of using let or const to bind variables uniquely to a scope. To be specific, let means variables can be declared only once in a block (curly brackets) and reassigned values as many times as you wish:\nfor(let i = 0; i \u0026lt; 10; i++) {} console.log(i); // ReferenceError: i is not defined if(true) { let i = 20; i = 10; console.log(i); // 10 let i = 30; // SyntaxError: Identifier \u0026#39;i\u0026#39; has already been declared } By contrast, const is similar to let without the reassignment property:\nif(true) { const i = 20; i = 10; // TypeError: Assignment to constant variable const i = 30; // SyntaxError: Identifier \u0026#39;i\u0026#39; has already been declared } console.log(i); // ReferenceError: i is not defined So, always use \u0026rsquo;let\u0026rsquo; and \u0026lsquo;const\u0026rsquo;!\nObjects There are many interesting and tricky things around objects in JS. The first big realisation for a beginner is perhaps that JS is a Prototype-based language. For me, the second was that you can add variables to objects after they are declared!\nvar name = \u0026#39;Mavi\u0026#39;; var breed = \u0026#39;Birman\u0026#39; var cat = { name: name, breed: breed, meow: function() { return \u0026#34;Meow! I\u0026#39;m \u0026#34; + this.name + \u0026#34; and I\u0026#39;m a \u0026#34; + this.breed + \u0026#34; cat.\u0026#34;; } } cat[\u0026#39;eyeColor\u0026#39;] = \u0026#39;blue\u0026#39;; This is obviously quite dangerous in the event the developer makes a false assumption about the existence of an object property or simply has a typo. To remedy this, it\u0026rsquo;s a good idea to use:\nconst wellBehavedCat = Object.freeze(cat); Bare in mind, adding a property to a frozen object will only throw an error in strict mode. But in any case, you will now prevent yourself from accidentally mutilating your cat with new properties.\nMore? There are plenty more interesting ideas that I\u0026rsquo;ve first stumbled into in JS like hoisting, closures, destructering and the numerous ways to create objects. Most of these have become \u0026ldquo;standard knowledge\u0026rdquo; now, but are never-the-less things you will need to come to grips with; I\u0026rsquo;ll leave those topics for another day.\n","permalink":"https://akyidrian.github.io/posts/2018-04-22-javascript-is-weird/","summary":"My Summary about Truthy/Falsy Values, Logical Operators, Scope and Objects","title":"JavaScript is Weird"},{"content":"Over the weekend, I had the pleasure of attending Conf \u0026amp; Coffee 2018 at the Unbounce office in Vancouver, BC. Organized by the Code \u0026amp; Coffee Meetup group, this conference catered to programmers with a love for caffeine. The event saw a diverse mix of professionals and students, with a noticeable inclination towards mobile and web development.\nTechnical talks and workshops covered a wide range of languages, frameworks, and platforms, including React, NodeJS, JavaScript, Ruby, CSS, Elm, Elixir, Haskell, Python, Arduino, Raspberry Pi, Johnny-Five, and Toccata. Additionally, discussions spanned higher-level topics such as blockchain, data infrastructure, functional programming, software development, leadership, mentorship, project management and coffee (of course). For a detailed conference breakdown, check out the conference schedule, with additional resources available here.\nMy experience at the conference left me feeling enriched and enlightened, particularly after immersing myself in workshops rather than talks. Here are my top five takeaways:\nEngineers and the software systems they create are inherently coupled, necessitating a holistic consideration of both JavaScript is weird Electronics and JavaScript actually do mix I need to learn functional programming to be a great programmer Leadership skills are invaluable, regardless of one\u0026rsquo;s position within an organization ","permalink":"https://akyidrian.github.io/posts/2018-04-21-conf-and-coffee-2018/","summary":"A Brief Conference Summary","title":"Conf \u0026 Coffee 2018"},{"content":"Welcome to my blog!\nThe primary purpose of my blog is to document my research, studies, and projects, and to help me organize, clarify and crystallize my thoughts. You\u0026rsquo;ll find a wide array of topics here, with a focus on computer science, software engineering, mathematics and investing. I also aim to connect and learn from others like yourself, so please to comment and share your thoughts!\nHere\u0026rsquo;s something to ponder: At first glance, many problems may seem dauntingly complex or even insurmountable. Yet, with perseverance, we often uncover simple, ordered and explainable patterns that lead to solutions. I\u0026rsquo;m Aydin Arik, and I invite you to join me on this journey of discovery and learning!\n","permalink":"https://akyidrian.github.io/posts/2018-04-02-hello-friend/","summary":"First Blog Post","title":"Hello Friend"}]