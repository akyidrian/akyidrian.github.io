[{"content":"Since graduating with an EEE degree back in 2013, it\u0026rsquo;s surprising how much the Arduino and Raspberry Pi wave has changed the hardware prototyping game and made electronics accessible to beginners. It is also somewhat surprising the way JavaScript (JS) has progressed beyond just making web pages more dynamic to now include the ability to directly control hardware. Many of the tools we take for granted now were not necessarily available to me at the time of my studies, and this makes me envious of newcomers today. At the same time however it is a reminder of how quickly technology changes and how one must adapt with the times.\nDuring the NodeBots Workshop at Conf \u0026amp; Coffee 2018, I went back to the basics and played around with the open source Johnny-Five platform using an Arduino Uno. Johnny-Five itself is a Node.js library that allows you to create JS programs for a huge range of development boards, and focuses on being a robotics and IoT platform. It specifically relies on the Firmata protocol to communicate with the microcontrollers on these boards, which allows you to add compatibility for your own boards too!\nGetting Started To begin showing off some of Johnny-Five\u0026rsquo;s power, here\u0026rsquo;s how you can blink your LED every second:\nvar five = require(\u0026#39;johnny-five\u0026#39;); var board = new five.Board(); board.on(\u0026#39;ready\u0026#39;, function () { var led = new five.Led(13); led.blink(1000); }); Very little code required as you can see!\nAs most web developers using JS would know, servicing asynchronous events is common place. So, it\u0026rsquo;s not too surprising to find that we can use callbacks on events from inputs like buttons:\nvar five = require(\u0026#39;johnny-five\u0026#39;); var board = new five.Board(); board.on(\u0026#39;ready\u0026#39;, function () { var led = new five.Led(13); var button = new five.Button(5); button.on(\u0026#34;press\u0026#34;, function() { led.toggle(); }); }); And for sensors like a photoresistors:\nvar five = require(\u0026#39;johnny-five\u0026#39;); var board = new five.Board(); board.on(\u0026#39;ready\u0026#39;, function () { var led = new five.Led(13); var sensor = new five.Sensor(\u0026#34;A0\u0026#34;); sensor.on(\u0026#34;change\u0026#34;, function() { if(this.value \u0026gt; 600) { led.on(); } else { led.off(); } }); }); Already, you can see this is all quite a step up from the days of having to write a round-robin loop, tune the loop frequency, configure data direction registries and mask the right pins with bit manipulation.\nClient-Server Examples Something else that took me by surprise is how easy it is to create a UDP client-server scenario. To demonstrate, I created a little client Node.js program for my computer to send empty datagrams on port 1337:\nvar dgram = require(\u0026#39;dgram\u0026#39;); var client = dgram.createSocket(\u0026#39;udp4\u0026#39;); client.send(\u0026#34;\u0026#34;, 1337, \u0026#39;localhost\u0026#39;, function(err) { console.error(\u0026#34;Failed to send. Is your Arduino running \u0026#39;server.js\u0026#39;?\\n\u0026#34;); client.close(); }); The server program running on the Arduino would then play a tune over a connected piezo speaker whenever a datagram was received via a connected USB cable:\nvar dgram = require(\u0026#39;dgram\u0026#39;); var five = require(\u0026#39;johnny-five\u0026#39;); var board = new five.Board(); board.on(\u0026#39;ready\u0026#39;, function () { var piezo = new five.Piezo(8); var server = dgram.createSocket(\u0026#39;udp4\u0026#39;); server.on(\u0026#39;message\u0026#39;, function() { piezo.play({ song: [ [\u0026#34;C4\u0026#34;, 1 / 4], [\u0026#34;D4\u0026#34;, 1 / 4], [\u0026#34;F4\u0026#34;, 1 / 4], [\u0026#34;D4\u0026#34;, 1 / 4], [\u0026#34;A4\u0026#34;, 1 / 4], [null, 1 / 4], [\u0026#34;A4\u0026#34;, 1], [\u0026#34;G4\u0026#34;, 1], [null, 1 / 2], [\u0026#34;C4\u0026#34;, 1 / 4], [\u0026#34;D4\u0026#34;, 1 / 4], [\u0026#34;F4\u0026#34;, 1 / 4], [\u0026#34;D4\u0026#34;, 1 / 4], [\u0026#34;G4\u0026#34;, 1 / 4], [null, 1 / 4], [\u0026#34;G4\u0026#34;, 1], [\u0026#34;F4\u0026#34;, 1], [null, 1 / 2] ], tempo: 100 }); }); server.bind(1337); }); Again, very simple! Most of the code is actually the notes of the song itself!\nIn a somewhat similar fashion, I played around with dnode, an asynchronous RPC system for Node.js, to help with remote function calls. The client on the computer connects and calls a getTemperature function with a callback function argument that outputs a temperature:\nvar dnode = require(\u0026#39;dnode\u0026#39;); var d = dnode.connect(1337); d.on(\u0026#39;remote\u0026#39;, function(remote) { remote.getTemperature(function(t) { console.log(\u0026#34;Temperature is: \u0026#34; + t + \u0026#34;\\n\u0026#34;); d.end(); }); }); The Arduino, or server, continuously updates a variable to keep track of the latest temperature from a connected sensor. Furthermore, the server also accepts any remote calls to its getTemperature that may have been made and executes the callback from the client with the latest temperature. The server code looks like this:\nvar dnode = require(\u0026#39;dnode\u0026#39;); var five = require(\u0026#39;johnny-five\u0026#39;); var board = new five.Board(); board.on(\u0026#39;ready\u0026#39;, function () { var therm = new five.Thermometer({ controller: \u0026#34;TMP36\u0026#34;, pin: \u0026#34;A0\u0026#34;, }); var temp = null; therm.on(\u0026#34;change\u0026#34;, function() { temp = this.C; }); var server = dnode({ getTemperature: function(cb) { cb(temp); } }); server.listen(1337); }); Debugging A neat thing I noticed is the console object can be used in code to be run on the board. This allows you to print to your Node.js terminal on your computer via USB, which is obviously very useful for debugging. Furthermore, through the power of REPL, you can execute code from the same terminal:\nvar five = require(\u0026#34;johnny-five\u0026#34;); var board = new five.Board(); board.on(\u0026#34;ready\u0026#34;, function() { var led = new five.Led(13); this.repl.inject({ // Allow limited on/off control access to the LED instance from the REPL. on: function() { led.on(); console.log(\u0026#34;LED is on\u0026#34;); }, off: function() { led.off(); console.log(\u0026#34;LED is off\u0026#34;); } }); }); Just type the following into the Node.js terminal to turn the LED on then off:\n\u0026gt; on() LED is on \u0026gt; \u0026gt; off() LED is off Closing I hope you enjoyed this short summary of my first hands-on experience with Johnny-Five. It certainly is a simple platform to get going on with some powerful features. If you\u0026rsquo;re interested, more of my code from the workshop can be found here.\n","permalink":"https://akyidrian.github.io/posts/2018-04-22-electronics-and-javascript-actually-do-mix/","summary":"My First Impressions of the Johnny-Five Platform","title":"Electronics and JavaScript Actually Do Mix"},{"content":"Since its humble beginnings at NetScape in 1995, JavaScript\u0026rsquo;s popularity has grown significantly beyond its initial goal of making web pages more dynamic. ECMAScript (ES), the standard for JavaScript (JS), has also undergone several evolutions too. Despite these developments however many of the oddities from the early version of JS have lingered and become characteristic of the language.\nRecently, I\u0026rsquo;ve delved back into JS and during the \u0026ldquo;JavaScript - The not so weird (anymore) parts\u0026rdquo; talk at Conf \u0026amp; Coffee 2018 I was reminded of some of the odd aspects of JS that I\u0026rsquo;ve fallen prey to. For new players, this can be frustrating, especially when the language itself is tripping you up rather than the problem you\u0026rsquo;re trying to solve. For me, coming from a C/C++ background, truthy/falsy values, logical operators, scope and objects particularly had me confused.\nTruthy and Falsy Values A truthy value is any value which is considered to be true inside a Boolean context (in an if statement, for example). The opposite to truthy is falsy, which is any value that is false inside a Boolean context. The tricky part of truthy and falsy values in JS is often trying to understand and remember the implicit type conversion (known as type coercion) performed on non-Boolean values in a Boolean context. A useful way to to avoid confusing yourself is to remember that the following are all the falsy values in JS:\nfalse 0 null undefined \u0026#39;\u0026#39; \u0026#34;\u0026#34; NaN Therefore, anything else must be truthy. Some examples of truthy values include:\ntrue \u0026#34;true\u0026#34; \u0026#34;false\u0026#34; \u0026#34;1\u0026#34; \u0026#34;0\u0026#34; \u0026#34;-1\u0026#34; 1 -1 1.62 -1.62 Infinity -Infinity {} [] function(){} new Date() Logical Operators With logical operators, we\u0026rsquo;re faced with an additional level of logical complexity around datatypes which isn\u0026rsquo;t necessarily consistent with what we expect. This is regardless of the truthy/falsy nature of values just discussed. For instance,\n// These seem consistent... false == 0 // true false == \u0026#34;\u0026#34; // true 0 == \u0026#34;\u0026#34; // true // These are not so consistent... false == null // false false == undefined // false null == undefined // true // This is common in other languages too, but easily be confused... false == NaN // false NaN == NaN // false // Interesting behaviour around [], {} and strings... false == [] // true false == [0] // true false == [[]] // true false == {} // false [] == {} // false false == \u0026#34;0\u0026#34; // true false == \u0026#34;false\u0026#34; // false For a more comprehensive table of equality, go here.\nAs a solution to help avoid the confusing variability shown, you could use the !! unary operator to force a value to become true or false. !! essential would allow the Boolean expressions as a whole to become more consistent with the truthy/falsy behaviour discussed before:\nfalse == !!null // true false == !!undefined // true false == !!NaN // true false == !![] // false false == !!\u0026#34;0\u0026#34; // false However, an even better solution is to check equality in type too. Thus, I recommend you always use strict equality operators (=== or !==) in comparing values. Doing so will help defend against the errors that can result due to the dynamic typing nature of JS; accidental reassignment of a variable from one type to another, for instance. Being verbose with the triple operators will also help you ensure you understand what you are writing, and make the lives of those who have to manage your code a little more straight forward.\nAs a final side note, there are seven datatypes in JS. Six of which are primitives:\nBoolean Null Undefined Number String Symbol (introduced in ECMAScript 6) with the seventh data type being Object. If you\u0026rsquo;re wondering what is the difference between Null and Undefined, I suggest you visit StackOverflow to find out.\nScope When coming from languages like C, we are used to variables declared inside a set of curly brackets to only exist within the curly brackets. In other words, variables are bound to a scope. In JS, this can become blurry when you use var keyword:\nfor(var i = 0; i \u0026lt; 10; i++) {} console.log(i); // 10 if(true) { var i = 20; var i = 30; } console.log(i); // 30 Likewise, and somewhat insidiously, without any keyword in the declaration, a variable becomes global:\nfunction globalisation() { var local = 3.14; global = \u0026#39;global\u0026#39;; } Although, this is assuming strict mode isn\u0026rsquo;t enabled, which can save you from a lot of pain as a beginner to JS.\nAs a result, generally it\u0026rsquo;s best to get into the habit of using let or const to bind variables uniquely to a scope. To be specific, let means variables can be declared only once in a block (curly brackets) and reassigned values as many times as you wish:\nfor(let i = 0; i \u0026lt; 10; i++) {} console.log(i); // ReferenceError: i is not defined if(true) { let i = 20; i = 10; console.log(i); // 10 let i = 30; // SyntaxError: Identifier \u0026#39;i\u0026#39; has already been declared } By contrast, const is similar to let without the reassignment property:\nif(true) { const i = 20; i = 10; // TypeError: Assignment to constant variable const i = 30; // SyntaxError: Identifier \u0026#39;i\u0026#39; has already been declared } console.log(i); // ReferenceError: i is not defined So, always use \u0026rsquo;let\u0026rsquo; and \u0026lsquo;const\u0026rsquo;!\nObjects There are many interesting and tricky things around objects in JS. The first big realisation for a beginner is perhaps that JS is a Prototype-based language. For me, the second was that you can add variables to objects after they are declared!\nvar name = \u0026#39;Mavi\u0026#39;; var breed = \u0026#39;Birman\u0026#39; var cat = { name: name, breed: breed, meow: function() { return \u0026#34;Meow! I\u0026#39;m \u0026#34; + this.name + \u0026#34; and I\u0026#39;m a \u0026#34; + this.breed + \u0026#34; cat.\u0026#34;; } } cat[\u0026#39;eyeColor\u0026#39;] = \u0026#39;blue\u0026#39;; This is obviously quite dangerous in the event the developer makes a false assumption about the existence of an object property or simply has a typo. To remedy this, it\u0026rsquo;s a good idea to use:\nconst wellBehavedCat = Object.freeze(cat); Bare in mind, adding a property to a frozen object will only throw an error in strict mode. But in any case, you will now prevent yourself from accidentally mutilating your cat with new properties.\nMore? There are plenty more interesting ideas that I\u0026rsquo;ve first stumbled into in JS like hoisting, closures, destructering and the numerous ways to create objects. Most of these have become \u0026ldquo;standard knowledge\u0026rdquo; now, but are never-the-less things you will need to come to grips with; I\u0026rsquo;ll leave those topics for another day.\n","permalink":"https://akyidrian.github.io/posts/2018-04-22-javascript-is-weird/","summary":"My Summary about Truthy/Falsy Values, Logical Operators, Scope and Objects","title":"JavaScript is Weird"},{"content":"Last weekend I attended Conf \u0026amp; Coffee 2018 at the Unbounce office in Vancouver, BC. This was a conference for programmers with a taste for coffee organised by the appropriately named Code \u0026amp; Coffee Meetup group. There was roughly an 80/20 split of professionals to students in attendance from quite varied backgrounds; although, based on my interactions, most appeared to gravitate towards mobile and web development. A professional ticket for the event set me back CAD$50.\nAs a keyword blowout summary, the technical talks and workshops were based around React, NodeJS, JavaScript, Ruby, CSS, Elm, Elixir, Haskell, Python, Arduino, Raspberry Pi, Johnny-Five and Toccata. There were also plenty of general conversations around blockchain, data infrastructure, functional programming, software development, leadership, mentorship, project management and coffee (of course). A complete conference breakdown can be seen here, with some resources available here.\nOverall, my experience was positive. I ended up spending most of my time in workshops because naturally the urge to actually do something sets in quickly after a few talks. The event itself ran smoothly despite it being the first conference organised by this group. There was also a good variation in food on both days! Lots of people attended on Saturday (~80 by my estimate) with a large dropout on Sunday presumably because 7 days of code, screens and the indoors is a little too much for most.\nMy top 5 main take-aways were:\nEngineers and the software systems they create are inherently coupled, meaning they should more often be considered together as a whole; JavaScript is weird; Electronics and JavaScript actually do mix; I really need to learn functional programming; and Leadership skills can and must be learnt even by those who aren\u0026rsquo;t in leadership roles. ","permalink":"https://akyidrian.github.io/posts/2018-04-21-conf-and-coffee-2018/","summary":"A Brief Conference Summary","title":"Conf \u0026 Coffee 2018"},{"content":"Welcome to my new blog called \u0026ldquo;Akyidrian\u0026rdquo;! Yes, I agree, it is a rather odd name for a blog, and I wouldn\u0026rsquo;t be surprised if you\u0026rsquo;re already suffering from an aneurysm and blabbering like a fool trying to read and pronounce it. Even after decyphering this wonderful word soup, you may start to suspect it is the name of an ancient Greek hero\u0026hellip; A_k_y_i_d_r_i_a_n. Is it obvious now\u0026hellip;?\nThe main purpose of this blog is to document my research, studies and projects and help organise, clarify and crystallise my thoughts. Primarily, anything relating to software engineering and investing will be fair game. There will likely be sprinkles of AI/ML, algorithms, computer security, control theory, data science, dynamical systems, economics, finance, mathematics and more. As a bonus, I hope to connect and learn from others like yourself during the process; so please do comment and share! Criticisms are especially welcome!\nSo why such an anagrammatic blog name? The simplest explanation of course is I couldn\u0026rsquo;t think of anything better. However, there is a point to be made with the name chosen: on first impression almost any problem can seem wildly complicated or impossible to solve. But with some perseverance, simple, ordered and explainable patterns can be found that ultimately lead us to solutions. With that, my name is Aydin Arik and let\u0026rsquo;s see how many problems, patterns and solutions I manage to find!\n","permalink":"https://akyidrian.github.io/posts/2018-04-02-say-my-name/","summary":"A First Blog Post","title":"Say My Name"}]